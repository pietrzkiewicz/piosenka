# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2018-08-12 15:17
from __future__ import unicode_literals

import content.models
import content.slug
import content.url_scheme
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import songs.models


class Migration(migrations.Migration):

    replaces = [('songs', '0001_initial'), ('songs', '0002_auto_20160626_1405'), ('songs', '0003_auto_20160626_1500'), ('songs', '0004_auto_20160719_2138'), ('songs', '0005_auto_20160911_1541'), ('songs', '0006_artistnote'), ('songs', '0007_auto_20161002_2258'), ('songs', '0008_auto_20161027_1931'), ('songs', '0009_auto_20161027_2124'), ('songs', '0010_remove_song_link_wrzuta'), ('songs', '0011_auto_20180719_2140'), ('songs', '0012_song_artist_for_slug'), ('songs', '0013_auto_20180728_1654'), ('songs', '0014_auto_20180728_1807'), ('songs', '0015_remove_song_old_slug'), ('songs', '0016_auto_20180812_1343'), ('songs', '0017_artist_cover_note'), ('songs', '0018_auto_20180812_1610')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('pub_date', models.DateTimeField(editable=False)),
                ('title', models.CharField(help_text='Tytuł adnotacji, np. "Aspazja" lub "Fortepian Chopina".', max_length=100)),
                ('text_trevor', models.TextField()),
                ('image', models.ImageField(blank=True, help_text='Ilustracja adnotacji. Pamiętaj o wskazaniu źródła tak samo jak w przypadku\ntreści zawartych w tekście adnotacji.', null=True, upload_to='song_annotations')),
                ('source_url1', models.URLField(blank=True, help_text='Link do źródła informacji, jeśli źródłem jest strona internetowa.', null=True)),
                ('source_url2', models.URLField(blank=True, help_text='Link do źródła informacji, jeśli źródłem jest strona internetowa.', null=True)),
                ('source_ref1', models.TextField(blank=True, help_text='Tytuł i autor publikacji źródłowej, jeśli adnotacja jest oparta na\npublikacjii.', null=True)),
                ('source_ref2', models.TextField(blank=True, help_text='Tytuł i autor publikacji źródłowej, jeśli adnotacja jest oparta na\npublikacjii.', null=True)),
                ('slug', models.SlugField(editable=False, help_text='Used in urls, has to be unique.', max_length=200, unique=True)),
                ('text_html', models.TextField(editable=False)),
                ('author', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'default_permissions': ['contribute'],
            },
            bases=(content.slug.SlugLogicMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(editable=False, max_length=100, unique=True)),
                ('name', models.CharField(help_text='Imię i nazwisko wykonawcy lub nazwa zespołu.', max_length=50)),
                ('featured', models.BooleanField(default=False, help_text='Czy artysta powinien być wyświetlany w spisie treści\nśpiewnika.')),
                ('category', models.IntegerField(blank=True, choices=[(1, 'Wykonawca własnych tekstów'), (2, 'Kompozytor'), (3, 'Bard zagraniczny'), (4, 'Zespół')], help_text='W której części spisu treści artysta ma być wyświetlony.\n', null=True)),
                ('website', models.URLField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(content.slug.SlugLogicMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EntityContribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('performed', models.BooleanField(default=False, verbose_name='wyk.')),
                ('texted', models.BooleanField(default=False, verbose_name='tekst')),
                ('translated', models.BooleanField(default=False, verbose_name='tł.')),
                ('composed', models.BooleanField(default=False, verbose_name='muz.')),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='songs.Artist', verbose_name='artysta')),
            ],
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('pub_date', models.DateTimeField(editable=False)),
                ('title', models.CharField(help_text='Tytuł piosenki.', max_length=100)),
                ('disambig', models.CharField(blank=True, help_text='Opcjonalna adnotacja rozróżniająca piosenki o tym samym tytule.', max_length=100, null=True)),
                ('original_title', models.CharField(blank=True, help_text="Tytuł oryginalnej piosenki w przypadku tłumaczenia, np. 'Mourir pour des idées'.", max_length=100, null=True)),
                ('link_youtube', models.URLField(blank=True, help_text='Link do nagrania piosenki w serwisie YouTube.', null=True)),
                ('link_wrzuta', models.URLField(blank=True, help_text='Link do nagrania piosenki w serwisie Wrzuta.', null=True)),
                ('score1', models.ImageField(blank=True, null=True, upload_to='scores')),
                ('score2', models.ImageField(blank=True, null=True, upload_to='scores')),
                ('score3', models.ImageField(blank=True, null=True, upload_to='scores')),
                ('capo_fret', models.IntegerField(default=0, help_text='Liczba od 0 do 11, 0 oznacza brak kapodastra.', validators=[songs.models.validate_capo_fret])),
                ('lyrics', models.TextField()),
                ('old_slug', models.SlugField(blank=True, editable=False, help_text='Old slug kept to maintain redirects.', max_length=100, null=True, unique=True)),
                ('slug', models.SlugField(editable=False, help_text='Used in urls, has to be unique.', max_length=200, unique=True)),
                ('has_extra_chords', models.BooleanField(default=False, editable=False, help_text='True iff the lyrics contain repeated chords.')),
                ('author', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'default_permissions': ['contribute'],
                'ordering': ['title', 'disambig'],
            },
            bases=(content.slug.SlugLogicMixin, models.Model),
        ),
        migrations.AddField(
            model_name='entitycontribution',
            name='song',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='songs.Song'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='song',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='songs.Song'),
        ),
        migrations.AlterUniqueTogether(
            name='song',
            unique_together=set([('title', 'disambig')]),
        ),
        migrations.AlterUniqueTogether(
            name='entitycontribution',
            unique_together=set([('song', 'artist')]),
        ),
        migrations.AddField(
            model_name='artist',
            name='author',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='artist',
            name='pub_date',
            field=models.DateTimeField(editable=False),
        ),
        migrations.AddField(
            model_name='artist',
            name='reviewed',
            field=models.BooleanField(default=False, editable=False),
        ),
        migrations.AlterField(
            model_name='annotation',
            name='author',
            field=models.ForeignKey(default=content.models.get_default_author, editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='annotation',
            name='pub_date',
            field=models.DateTimeField(default=content.models.get_default_pub_date, editable=False),
        ),
        migrations.AddField(
            model_name='artist',
            name='born_on',
            field=models.DateField(blank=True, help_text='Data urodzin.', null=True),
        ),
        migrations.AddField(
            model_name='artist',
            name='description_html',
            field=models.TextField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='artist',
            name='description_trevor',
            field=models.TextField(blank=True, help_text='Krótki opis podmiotu w stylu encyklopedycznym.', null=True),
        ),
        migrations.AddField(
            model_name='artist',
            name='died_on',
            field=models.DateField(blank=True, help_text='Data śmierci.', null=True),
        ),
        migrations.AddField(
            model_name='artist',
            name='image',
            field=models.ImageField(blank=True, help_text='Ilustracja - zdjęcie artysty.', null=True, upload_to='artists'),
        ),
        migrations.AlterField(
            model_name='artist',
            name='category',
            field=models.IntegerField(blank=True, choices=[(1, 'Wykonawca własnych tekstów'), (2, 'Kompozytor'), (3, 'Bard zagraniczny'), (4, 'Zespół')], help_text='Kategoria w spisie treści śpiewnika.', null=True),
        ),
        migrations.AlterField(
            model_name='artist',
            name='featured',
            field=models.BooleanField(default=False, help_text='Czy podmiot ma figurować w spisie treści.'),
        ),
        migrations.AddField(
            model_name='artist',
            name='image_author',
            field=models.CharField(blank=True, help_text='Źródło zdjęcia (autor).', max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='artist',
            name='image_url',
            field=models.URLField(blank=True, help_text='Źródło zdjęcia (adres www).', null=True),
        ),
        migrations.AlterField(
            model_name='artist',
            name='website',
            field=models.URLField(blank=True, help_text='Strona internetowa artysty.', null=True),
        ),
        migrations.AlterField(
            model_name='annotation',
            name='author',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='annotation',
            name='pub_date',
            field=models.DateTimeField(editable=False),
        ),
        migrations.CreateModel(
            name='ArtistNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(editable=False, max_length=100, unique=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('pub_date', models.DateTimeField(editable=False)),
                ('title', models.CharField(help_text='Tytuł adnotacji.', max_length=100)),
                ('image', models.ImageField(blank=True, help_text='Ilustracja.', null=True, upload_to='notes')),
                ('image_url', models.URLField(blank=True, help_text='Źródło zdjęcia (adres www).', null=True)),
                ('image_author', models.CharField(blank=True, help_text='Źródło zdjęcia (autor).', max_length=50, null=True)),
                ('text_trevor', models.TextField(help_text='Treść adnotacji.')),
                ('text_html', models.TextField(editable=False)),
                ('url1', models.URLField(blank=True, help_text='Źródło (adres www).', null=True)),
                ('url2', models.URLField(blank=True, help_text='Źródło (adres www).', null=True)),
                ('ref1', models.TextField(blank=True, help_text='Źródło (nazwa i autor publikacji).', null=True)),
                ('ref2', models.TextField(blank=True, help_text='Źródło (nazwa i autor publikacji).', null=True)),
                ('artist', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='songs.Artist')),
                ('author', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('image_license', models.CharField(blank=True, help_text='Źródło zdjęcia (licencja).', max_length=50, null=True)),
            ],
            options={
                'abstract': False,
                'default_permissions': [],
            },
            bases=(content.url_scheme.EditReviewApprove, content.slug.SlugLogicMixin, models.Model),
        ),
        migrations.AlterModelOptions(
            name='annotation',
            options={'default_permissions': []},
        ),
        migrations.AlterModelOptions(
            name='song',
            options={'default_permissions': [], 'ordering': ['title', 'disambig']},
        ),
        migrations.RemoveField(
            model_name='artist',
            name='description_html',
        ),
        migrations.RemoveField(
            model_name='artist',
            name='description_trevor',
        ),
        migrations.RemoveField(
            model_name='artist',
            name='image',
        ),
        migrations.RemoveField(
            model_name='artist',
            name='image_author',
        ),
        migrations.RemoveField(
            model_name='artist',
            name='image_url',
        ),
        migrations.RemoveField(
            model_name='artist',
            name='author',
        ),
        migrations.RemoveField(
            model_name='artist',
            name='pub_date',
        ),
        migrations.RemoveField(
            model_name='artist',
            name='reviewed',
        ),
        migrations.CreateModel(
            name='SongNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(editable=False, max_length=100, unique=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('pub_date', models.DateTimeField(editable=False)),
                ('title', models.CharField(help_text='Tytuł adnotacji.', max_length=100)),
                ('image', models.ImageField(blank=True, help_text='Ilustracja.', null=True, upload_to='notes')),
                ('image_url', models.URLField(blank=True, help_text='Źródło zdjęcia (adres www).', null=True)),
                ('image_author', models.CharField(blank=True, help_text='Źródło zdjęcia (autor).', max_length=50, null=True)),
                ('text_trevor', models.TextField(help_text='Treść adnotacji.')),
                ('text_html', models.TextField(editable=False)),
                ('url1', models.URLField(blank=True, help_text='Źródło (adres www).', null=True)),
                ('url2', models.URLField(blank=True, help_text='Źródło (adres www).', null=True)),
                ('ref1', models.TextField(blank=True, help_text='Źródło (nazwa i autor publikacji).', null=True)),
                ('ref2', models.TextField(blank=True, help_text='Źródło (nazwa i autor publikacji).', null=True)),
                ('author', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'default_permissions': [],
            },
            bases=(content.url_scheme.EditReviewApprove, content.slug.SlugLogicMixin, models.Model),
        ),
        migrations.AlterField(
            model_name='song',
            name='disambig',
            field=models.CharField(blank=True, help_text='Adnotacja rozróżniająca piosenki o tym samym tytule.', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='song',
            name='original_title',
            field=models.CharField(blank=True, help_text='Tytuł oryginalnej piosenki w przypadku tłumaczenia.', max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='songnote',
            name='song',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='songs.Song'),
        ),
        migrations.RemoveField(
            model_name='song',
            name='link_wrzuta',
        ),
        migrations.RemoveField(
            model_name='annotation',
            name='author',
        ),
        migrations.RemoveField(
            model_name='annotation',
            name='song',
        ),
        migrations.DeleteModel(
            name='Annotation',
        ),
        migrations.AddField(
            model_name='song',
            name='artist_for_slug',
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.RemoveField(
            model_name='song',
            name='old_slug',
        ),
        migrations.AddField(
            model_name='songnote',
            name='image_license',
            field=models.CharField(blank=True, help_text='Źródło zdjęcia (licencja).', max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='artist',
            name='cover_note',
            field=models.ForeignKey(blank=True, help_text='Notka której ilustracja może służyć za okładkę.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='artists_covered', to='songs.ArtistNote'),
        ),
    ]
